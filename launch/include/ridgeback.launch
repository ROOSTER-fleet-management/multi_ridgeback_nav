<launch>
  <arg name="namespace" default="r0" />
  <arg name="tfpre" default="$(arg namespace)_tf" />
  <arg name="robot_name"/>
  <arg name="initX" default="0" />
  <arg name="initY" default="0" />
  <arg name="initZ" default="0.1" />
  <arg name="initYaw" default="0" />
  <!-- Configuration of Ridgeback which you would like to simulate.
       See ridgeback_description for details. empty / base / base_sick / dual_hokuyo_lasers / dual_sick_lasers -->
  <arg name="config" default="$(optenv RIDGEBACK_CONFIG base)" />

  <param name="tf_prefix" value="$(arg tfpre)" />

  <param name="robot_description"
         command="$(find ridgeback_description)/scripts/env_run
                  $(find ridgeback_description)/urdf/configs/$(arg config)
                  $(find xacro)/xacro $(find multi_ridgeback_gazebo)/urdf/ridgeback.urdf.xacro
                  nsp:=$(arg namespace)
                  tfpre:=$(arg tfpre)
                  --inorder " />
  
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/> 
  
  <rosparam command="load" file="$(find multi_ridgeback_nav)/config/control.yaml" />
  <rosparam param="ekf_localization/odom0" subst_value="True">odom</rosparam>
  <rosparam param="ekf_localization/imu0" subst_value="True">imu/data</rosparam>
  
  <node name="controller_spawner" pkg="controller_manager" type="spawner" 
        args="ridgeback_joint_publisher ridgeback_velocity_controller"/>

  <!-- Localization using imu and odometry simulated by Gazebo -->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization"></node>
  
  <node pkg="topic_tools" type="relay" name="cmd_vel_relay"
        args="/$(arg namespace)/cmd_vel /$(arg namespace)/ridgeback_velocity_controller/cmd_vel" />
   
  <!-- <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_cmd_vel" output="screen" launch-prefix="gnome-terminal -e"/> -->

  <rosparam param="gazebo_ros_control/pid_gains">
    front_left_wheel:
      p: 1
      i: 0.1
      d: 0
    front_right_wheel:
      p: 1
      i: 0.1
      d: 0
    rear_left_wheel:
      p: 1
      i: 0.1
      d: 0
    rear_right_wheel:
      p: 1
      i: 0.1
      d: 0
  </rosparam>

  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        args="-x $(arg initX) -y $(arg initY) -z $(arg initZ) -Y $(arg initYaw) -urdf -model $(arg robot_name) -param robot_description " output="screen"/>

  <!-- <arg name="twist_config" default="planar" />
  <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server">
    <remap from="twist_marker_server/cmd_vel" to="cmd_vel" />
    <rosparam command="load" file="$(find interactive_marker_twist_server)/config/$(arg twist_config).yaml" />
  </node> -->

  <!-- ....................................... navigation ..................................... -->
  <!--- Run AMCL -->
 <!-- <include file="$(find ridgeback_navigation)/launch/include/amcl.launch" />
 <rosparam param="amcl/initial_pose_x" subst_value="True">$(arg initX)</rosparam>
 <rosparam param="amcl/initial_pose_y" subst_value="True">$(arg initY)</rosparam>
 <rosparam param="amcl/initial_pose_a" subst_value="True">$(arg initYaw)</rosparam>
 <rosparam param="amcl/global_frame_id" subst_value="True">/map</rosparam> -->
 

  <!--- Run Move Base -->
 <!-- <include file="$(find ridgeback_navigation)/launch/include/move_base.launch" />
 <rosparam param="move_base/global_costmap/global_frame" subst_value="True">/map</rosparam>
 <rosparam param="move_base/local_costmap/global_frame" subst_value="True">/map</rosparam> -->

</launch>
